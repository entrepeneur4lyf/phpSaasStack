{% extends "layouts/default.twig" %}

{% block content %}
<div x-data="portfolioManager()" class="portfolio-manager">
    <h1>Manage Portfolio</h1>
    
    <sl-button @click="showAddForm = true">Add New Portfolio Item</sl-button>

    <div class="portfolio-items">
        <template x-for="item in items" :key="item.id">
            <sl-card class="portfolio-item">
                <img slot="image" :src="item.image_url" :alt="item.title">
                <strong x-text="item.title"></strong>
                <p x-text="item.description"></p>
                <div slot="footer">
                    <sl-button @click="editItem(item)">Edit</sl-button>
                    <sl-button @click="deleteItem(item.id)" variant="danger">Delete</sl-button>
                </div>
            </sl-card>
        </template>
    </div>

    <sl-dialog label="Add Portfolio Item" :open="showAddForm" @sl-hide="showAddForm = false">
        <sl-form @submit.prevent="addItem">
            <sl-input name="title" label="Title" x-model="newItem.title" required></sl-input>
            <sl-textarea name="description" label="Description" x-model="newItem.description" required></sl-textarea>
            <sl-input type="file" name="image" label="Image" @change="handleFileChange($event, 'newItem')" required></sl-input>
            <sl-button type="submit" variant="primary">Add Item</sl-button>
        </sl-form>
    </sl-dialog>

    <sl-dialog label="Edit Portfolio Item" :open="showEditForm" @sl-hide="showEditForm = false">
        <sl-form @submit.prevent="updateItem">
            <sl-input name="title" label="Title" x-model="editingItem.title" required></sl-input>
            <sl-textarea name="description" label="Description" x-model="editingItem.description" required></sl-textarea>
            <sl-input type="file" name="image" label="Image" @change="handleFileChange($event, 'editingItem')"></sl-input>
            <sl-button type="submit" variant="primary">Update Item</sl-button>
        </sl-form>
    </sl-dialog>
</div>

<script>
function portfolioManager() {
    return {
        items: {{ portfolioItems|json_encode|raw }},
        newItem: { title: '', description: '', image: null },
        editingItem: null,
        showAddForm: false,
        showEditForm: false,

        addItem(event) {
            const form = event.target;
            const formData = new FormData(form);

            fetch('/portfolio/add', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.items.push(data.item);
                    this.showAddForm = false;
                    this.newItem = { title: '', description: '', image: null };
                } else {
                    alert('Failed to add portfolio item');
                }
            });
        },

        editItem(item) {
            this.editingItem = { ...item };
            this.showEditForm = true;
        },

        updateItem(event) {
            const form = event.target;
            const formData = new FormData(form);
            formData.append('id', this.editingItem.id);

            fetch('/portfolio/update', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const index = this.items.findIndex(item => item.id === this.editingItem.id);
                    this.items[index] = data.item;
                    this.showEditForm = false;
                    this.editingItem = null;
                } else {
                    alert('Failed to update portfolio item');
                }
            });
        },

        deleteItem(itemId) {
            if (confirm('Are you sure you want to delete this portfolio item?')) {
                fetch('/portfolio/delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ item_id: itemId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        this.items = this.items.filter(item => item.id !== itemId);
                    } else {
                        alert('Failed to delete portfolio item');
                    }
                });
            }
        },

        handleFileChange(event, target) {
            const file = event.target.files[0];
            if (file) {
                this[target].image = file;
                if (target === 'editingItem') {
                    this[target].newImage = file;
                }
            }
        }
    }
}
</script>
{% endblock %}