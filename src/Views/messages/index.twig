{% extends "layouts/default.twig" %}

{% block content %}
<div x-data="messageSystem()" class="messages-container">
    <h2>Messages</h2>
    
    <sl-tab-group>
        <sl-tab slot="nav" panel="inbox">Inbox</sl-tab>
        <sl-tab slot="nav" panel="sent">Sent</sl-tab>
        <sl-tab slot="nav" panel="compose">Compose</sl-tab>

        <sl-tab-panel name="inbox">
            <div class="message-list" 
                 hx-get="/messages/inbox" 
                 hx-trigger="load, newMessage from:body"
                 hx-swap="innerHTML"
                 ws-send="newMessage">
                <!-- Message list will be loaded here -->
            </div>
        </sl-tab-panel>

        <sl-tab-panel name="sent">
            <div class="message-list">
                <template x-for="message in sent" :key="message.id">
                    <sl-card class="message-card" @click="viewMessage(message.id)">
                        <strong x-text="message.subject"></strong>
                        <p x-text="'To: ' + message.recipient_name"></p>
                        <p x-text="formatDate(message.created_at)"></p>
                    </sl-card>
                </template>
            </div>
        </sl-tab-panel>

        <sl-tab-panel name="compose">
            <sl-form x-data="formHandler('/messages/send')" @submit.prevent="submitForm">
                <sl-input name="recipient" label="To" required></sl-input>
                <sl-input name="subject" label="Subject" required></sl-input>
                <sl-textarea name="content" label="Message" required></sl-textarea>
                <sl-button type="submit" :disabled="loading" aria-label="Send message">
                    <sl-spinner x-show="loading"></sl-spinner>
                    Send Message
                </sl-button>
            </sl-form>
        </sl-tab-panel>
    </sl-tab-group>
</div>

<script>
function formHandler(action) {
    return {
        loading: false,
        async submitForm(event) {
            this.loading = true;
            const form = event.target;
            const formData = new FormData(form);

            try {
                const response = await fetch(action, {
                    method: 'POST',
                    body: formData
                });
                const result = await response.json();
                if (result.success) {
                    Alpine.store('app').addNotification('Message sent successfully');
                    form.reset();
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                Alpine.store('app').addNotification(`Error: ${error.message}`);
            } finally {
                this.loading = false;
            }
        }
    }
}
</script>

<script>
function messageSystem() {
    return {
        inbox: {{ inbox|json_encode|raw }},
        sent: {{ sent|json_encode|raw }},

        formatDate(dateString) {
            return new Date(dateString).toLocaleString();
        },

        viewMessage(messageId) {
            window.location.href = `/messages/view/${messageId}`;
        },

        sendMessage(event) {
            const form = event.target;
            const formData = new FormData(form);

            fetch('/messages/send', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.sent.unshift(data.message);
                    form.reset();
                    alert('Message sent successfully');
                } else {
                    alert('Failed to send message');
                }
            });
        }
    }
}
</script>
{% endblock %}
